use clap::{App, Arg, ArgMatches};

/// Builds the CLI so the main file doesn't get cluttered.
pub fn build_cli() -> ArgMatches<'static> {
    // use `static because what's returned is used across the application
    App::new(clap::crate_name!())
        .about(clap::crate_description!())
        .version(clap::crate_version!())
        .author(clap::crate_authors!("\n"))
        .long_about(clap::crate_description!())
        .arg(
            Arg::with_name("files")
                .value_name("FILE(S)")
                .help("One or more file(s) to process.")
                .long_help("One or more files to process.  Wildcards and multiple files (e.g. 2019*.flac 2020*.mp3) are supported.")
                .takes_value(true)
                .multiple(true)
                .required(true),
        )
        .arg( // Debug (hidden)
            Arg::with_name("debug")
                .short("d")
                .long("debug")
                .multiple(true)
                .help("Output debug information as we go. Supply it twice for trace-level logs.")
                .takes_value(false)
                .hidden(true),
        )
        .arg( // Don't print any information
            Arg::with_name("quiet")
                .short("q")
                .long("quiet")
                .multiple(false)
                .help("Don't produce any output except errors while working.")
                .takes_value(false)
        )
        .arg( // Stop on error
            Arg::with_name("stop")
                .short("s")
                .long("stop-on-error")
                .multiple(false)
                .help("Stop on error.")
                .long_help("Stop on error. If this flag isn't set, the application will attempt to continue in case of error.")
                .takes_value(false),
        )
        .arg( // Dry-run
            Arg::with_name("dry-run")
                .short("r")
                .long("dry-run")
                .help("Iterate through the files and produce output without actually processing anything.")
                .multiple(false)
                .takes_value(false)
        )
        .arg( // Print summary information
            Arg::with_name("print-summary")
                .short("p")
                .long("print-summary")
                .multiple(false)
                .help("Print summary after all files are processed.")
                .takes_value(false)
        )
        .arg( // Don't export detail information
            Arg::with_name("detail-off")
                .short("o")
                .long("detail-off")
                .help("Don't display detailed information about each file processed.")
                .multiple(false)
                .takes_value(false)
        )
        .arg( // Config file
            Arg::with_name("config-file")
                .short("c")
                .long("config-file")
                .help("The name of the config file to be read.")
                .long_help("The name of the config file to be read. Note that this is specified WITHOUT the '=', eg. -c myconfig.toml")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
                .default_value("~/.id3tag-config.toml")
                .display_order(1)
        )
        //////////////////////////////////////////////
        // Options
        .arg( // Album artist
            Arg::with_name("album-artist")
                .long("album-artist")
                .visible_alias("aa")
                .help("The album artist(s).")
                .long_help("The name of the album artist(s). Use quotation marks for multi-word entries.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Album artist sort
            Arg::with_name("album-artist-sort")
                .long("album-artist-sort")
                .visible_alias("aas")
                .help("Album artist(s) sort name.")
                .long_help("The name on which the album artist(s) is sorted. Use quotation marks for multi-word entries. Example: Artist is 'Alicia Keys', but this value may be 'Keys, Alicia'. This is usually set to be the same for all tracks and discs for an album. Use quotation marks for multi-word entries.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Album title
            Arg::with_name("album-title")
                .long("album-title")
                .visible_alias("at")
                .help("The album title.")
                .help("The title of the album. Use quotation marks for multi-word entries.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Album title sort
            Arg::with_name("album-title-sort")
                .long("album-title-sort")
                .visible_alias("ats")
                .help("The album title sort name.")
                .long_help("The sorting title of the album. Use quotation marks for multi-word entries. Example: Title is 'The Division Bell', but the sorting title is 'Division Bell, The'. Not commonly used.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Disc number
            Arg::with_name("disc-number")
                .long("disc-number")
                .visible_alias("dn")
                .help("The disc number.")
                .long_help("The disc number for the disc being processed. This would take the form of 'DISCNUMBER (this value) of TOTALDISCS'.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
            )
        .arg( // Disc total
            Arg::with_name("disc-total")
                .long("disc-total")
                .visible_alias("dt")
                .help("The total number of discs for the album.")
                .long_help("The total number of discs that make up this album. This would take the form of 'DISCNUMBER of TOTALDISCS (this value)'.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track artist
            Arg::with_name("track-artist")
                .long("track-artist")
                .visible_alias("ta")
                .help("The track artist.")
                .long_help("The name of the track artist(s). Use quotation marks for multi-word entries.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track artist sort
            Arg::with_name("track-artist-sort")
                .long("track-artist-sort")
                .visible_alias("tas")
                .help("The track artist(s) sort name.")
                .help("The sort name of the track artist(s). Use quotation marks for multi-word entries. Example: Artist is 'Alicia Keys', but this value may be 'Keys, Alicia'.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track title
            Arg::with_name("track-title")
                .long("track-title")
                .visible_alias("tt")
                .help("The title of the track.")
                .long_help("The title of the track. Use quotation marks for multi-word entries.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track title sort
            Arg::with_name("track-title-sort")
                .long("track-title-sort")
                .visible_alias("tts")
                .help("The sort title of the track.")
                .help("The sort title of the track. Use quotation marks for multi-word entries. This is rarely used.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track number
            Arg::with_name("track-number")
                .long("track-number")
                .visible_alias("tn")
                .help("The track number.")
                .help("The track number. Takes the form of 'TRACKNUMBER (this value) of TOTALTRACKS'.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
            )
        .arg( // Track total
            Arg::with_name("track-total")
                .long("track-total")
                .visible_alias("to")
                .help("The total number of tracks for the disc.")
                .help("The total number of tracks for the disc. Takes the form of 'TRACKNUMBER of TOTALTRACKS (this value)'.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track genre
            Arg::with_name("track-genre")
                .long("track-genre")
                .visible_alias("tg")
                .help("The track music genre.")
                .long_help("The track music genre (eg. 'Rock', 'R&B', 'Classical'). This is usually set to the same value for all tracks on a disc or album. Use quotation marks for multi-word entries. Cannot be combined with '--track-genre-number'.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track genre number
            Arg::with_name("track-genre-number")
                .long("track-genre-number")
                .visible_alias("tgn")
                .help("The track music genre number.")
                .long_help("The track music genre number (eg. 'Rock'=17, 'R&B'=14, 'Classical'=32). This is usually set to the same value for all tracks on a disc or album. Cannot be combined with '--track-genre'. Whichever is passed LAST is used.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
                .conflicts_with("track-genre") // works both ways
                .validator(genre_number_validator)
        )
        .arg( // Track composer
            Arg::with_name("track-composer")
                .long("track-composer")
                .visible_alias("tc")
                .help("The composer(s) for the track.")
                .help("The composer(s) for the track. Use quotation marks for multi-word entries.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track composer sort
            Arg::with_name("track-composer-sort")
                .long("track-composer-sort")
                .visible_alias("tcs")
                .help("The sort composer(s) for the track.")
                .help("The sort composer(s) for the track. Use quotation marks for multi-word entries. For example, if the composer is 'Ludwig van Beethoven', this value could be 'Beethoven, Ludwig van'.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Track date
            Arg::with_name("track-date")
                .long("track-date")
                .visible_alias("td")
                .help("The release date for the track.")
                .help("The release date for the track. This is usually the album release date. Can be a year or a date.")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Front cover picture
            Arg::with_name("picture-front")
                .long("picture-front")
                .visible_alias("pf")
                .help("The front cover picture file name.")
                .long_help("The front cover picture file name. Example: 'cover-front.jpg'")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Back cover picture
            Arg::with_name("picture-back")
                .long("picture-back")
                .visible_alias("pb")
                .help("The back cover picture file name.")
                .long_help("The back cover picture file name. Example: 'cover-back.jpg'")
                .takes_value(true)
                .multiple(false)
                .require_equals(false)
        )
        .arg( // Tags (Hidden)
            Arg::with_name("tags")
                .long("tags")
                .short("t")
                .help("The tags you wish to set in the form `key1=value1, key2=value2`. Note the space between entries!")
                .takes_value(true)
                .multiple(true)
                .require_equals(false)
                .hidden(true)
        )
        .get_matches()
}

fn genre_number_validator(input: String) -> Result<(), String> {
    let genre_num = u16::from_str_radix(&input, 16);
    match genre_num {
        Ok(gn) => {
            if gn <= 191 {
                return Ok(());
            } else {
                Err(String::from("track-genre-number must be 0-191."))
            }
        }
        Err(_) => Err(String::from(
            "Unable to parse the input provided to --track-genre-number.",
        )),
    }
}
